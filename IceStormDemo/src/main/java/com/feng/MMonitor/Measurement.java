// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Monitor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.feng.MMonitor;

public class Measurement implements Cloneable, java.io.Serializable
{
    public String tower;

    public float windSpeed;

    public short windDirection;

    public float temperature;

    public Measurement()
    {
        tower = "";
    }

    public Measurement(String tower, float windSpeed, short windDirection, float temperature)
    {
        this.tower = tower;
        this.windSpeed = windSpeed;
        this.windDirection = windDirection;
        this.temperature = temperature;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Measurement _r = null;
        if(rhs instanceof Measurement)
        {
            _r = (Measurement)rhs;
        }

        if(_r != null)
        {
            if(tower != _r.tower)
            {
                if(tower == null || _r.tower == null || !tower.equals(_r.tower))
                {
                    return false;
                }
            }
            if(windSpeed != _r.windSpeed)
            {
                return false;
            }
            if(windDirection != _r.windDirection)
            {
                return false;
            }
            if(temperature != _r.temperature)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::MMonitor::Measurement");
        __h = IceInternal.HashUtil.hashAdd(__h, tower);
        __h = IceInternal.HashUtil.hashAdd(__h, windSpeed);
        __h = IceInternal.HashUtil.hashAdd(__h, windDirection);
        __h = IceInternal.HashUtil.hashAdd(__h, temperature);
        return __h;
    }

    public Measurement
    clone()
    {
        Measurement c = null;
        try
        {
            c = (Measurement)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(tower);
        __os.writeFloat(windSpeed);
        __os.writeShort(windDirection);
        __os.writeFloat(temperature);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        tower = __is.readString();
        windSpeed = __is.readFloat();
        windDirection = __is.readShort();
        temperature = __is.readFloat();
    }

    static public void
    __write(IceInternal.BasicStream __os, Measurement __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Measurement
    __read(IceInternal.BasicStream __is, Measurement __v)
    {
        if(__v == null)
        {
             __v = new Measurement();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Measurement __nullMarshalValue = new Measurement();

    public static final long serialVersionUID = -741276939L;
}
